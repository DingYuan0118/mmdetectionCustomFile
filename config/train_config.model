Config (path: ./custom/config/my_faster_rcnn.py): 
{'model': {'type': 'FasterRCNN', 'pretrained': 'torchvision: \\resnet50', 'backbone': {'type': 'RepResnet', 'depth': 50, 'num_stages': 4, 'out_indices': (0,
            1,
            2,
            3), 'frozen_stages': 1, 'norm_cfg': {'type': 'BN', 'requires_grad': True
            }, 'norm_eval': True, 'style': 'pytorch', 'dcn': {'type': 'RepDCN', 'deform_groups': 1, 'fallback_on_stride': False
            }, 'stage_with_dcn': (False, True, True, True)
        }, 'neck': {'type': 'FPN', 'in_channels': [
                256,
                512,
                1024,
                2048
            ], 'out_channels': 256, 'num_outs': 5
        }, 'rpn_head': {'type': 'RPNHead', 'in_channels': 256, 'feat_channels': 256, 'anchor_generator': {'type': 'AnchorGenerator', 'scales': [
                    8
                ], 'ratios': [
                    0.5,
                    1.0,
                    2.0
                ], 'strides': [
                    4,
                    8,
                    16,
                    32,
                    64
                ]
            }, 'bbox_coder': {'type': 'DeltaXYWHBBoxCoder', 'target_means': [
                    0.0,
                    0.0,
                    0.0,
                    0.0
                ], 'target_stds': [
                    1.0,
                    1.0,
                    1.0,
                    1.0
                ]
            }, 'loss_cls': {'type': 'CrossEntropyLoss', 'use_sigmoid': True, 'loss_weight': 1.0
            }, 'loss_bbox': {'type': 'L1Loss', 'loss_weight': 1.0
            }
        }, 'roi_head': {'type': 'StandardRoIHead', 'bbox_roi_extractor': {'type': 'SingleRoIExtractor', 'roi_layer': {'type': 'RoIAlign', 'output_size': 7, 'sampling_ratio': 0
                }, 'out_channels': 256, 'featmap_strides': [
                    4,
                    8,
                    16,
                    32
                ]
            }, 'bbox_head': {'type': 'Shared2FCBBoxHead', 'in_channels': 256, 'fc_out_channels': 1024, 'roi_feat_size': 7, 'num_classes': 80, 'bbox_coder': {'type': 'DeltaXYWHBBoxCoder', 'target_means': [
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ], 'target_stds': [
                        0.1,
                        0.1,
                        0.2,
                        0.2
                    ]
                }, 'reg_class_agnostic': False, 'loss_cls': {'type': 'CrossEntropyLoss', 'use_sigmoid': False, 'loss_weight': 1.0
                }, 'loss_bbox': {'type': 'L1Loss', 'loss_weight': 1.0
                }
            }
        }, 'train_cfg': {'rpn': {'assigner': {'type': 'MaxIoUAssigner', 'pos_iou_thr': 0.7, 'neg_iou_thr': 0.3, 'min_pos_iou': 0.3, 'match_low_quality': True, 'ignore_iof_thr': -1
                }, 'sampler': {'type': 'RandomSampler', 'num': 256, 'pos_fraction': 0.5, 'neg_pos_ub': -1, 'add_gt_as_proposals': False
                }, 'allowed_border': -1, 'pos_weight': -1, 'debug': False
            }, 'rpn_proposal': {'nms_pre': 2000, 'max_per_img': 1000, 'nms': {'type': 'nms', 'iou_threshold': 0.7
                }, 'min_bbox_size': 0
            }, 'rcnn': {'assigner': {'type': 'MaxIoUAssigner', 'pos_iou_thr': 0.5, 'neg_iou_thr': 0.5, 'min_pos_iou': 0.5, 'match_low_quality': False, 'ignore_iof_thr': -1
                }, 'sampler': {'type': 'RandomSampler', 'num': 512, 'pos_fraction': 0.25, 'neg_pos_ub': -1, 'add_gt_as_proposals': True
                }, 'pos_weight': -1, 'debug': False
            }
        }, 'test_cfg': {'rpn': {'nms_pre': 1000, 'max_per_img': 1000, 'nms': {'type': 'nms', 'iou_threshold': 0.7
                }, 'min_bbox_size': 0
            }, 'rcnn': {'score_thr': 0.05, 'nms': {'type': 'nms', 'iou_threshold': 0.5
                }, 'max_per_img': 100
            }
        }
    }, 'dataset_type': 'CocoDataset', 'data_root': 'data/coco/', 'img_norm_cfg': {'mean': [
            123.675,
            116.28,
            103.53
        ], 'std': [
            58.395,
            57.12,
            57.375
        ], 'to_rgb': True
    }, 'train_pipeline': [
        {'type': 'LoadImageFromFile'
        },
        {'type': 'LoadAnnotations', 'with_bbox': True
        },
        {'type': 'Resize', 'img_scale': (1333,
            800), 'keep_ratio': True
        },
        {'type': 'RandomFlip', 'flip_ratio': 0.5
        },
        {'type': 'Normalize', 'mean': [
                123.675,
                116.28,
                103.53
            ], 'std': [
                58.395,
                57.12,
                57.375
            ], 'to_rgb': True
        },
        {'type': 'Pad', 'size_divisor': 32
        },
        {'type': 'DefaultFormatBundle'
        },
        {'type': 'Collect', 'keys': ['img', 'gt_bboxes', 'gt_labels'
            ]
        }
    ], 'test_pipeline': [
        {'type': 'LoadImageFromFile'
        },
        {'type': 'MultiScaleFlipAug', 'img_scale': (1333,
            800), 'flip': False, 'transforms': [
                {'type': 'Resize', 'keep_ratio': True
                },
                {'type': 'RandomFlip'
                },
                {'type': 'Normalize', 'mean': [
                        123.675,
                        116.28,
                        103.53
                    ], 'std': [
                        58.395,
                        57.12,
                        57.375
                    ], 'to_rgb': True
                },
                {'type': 'Pad', 'size_divisor': 32
                },
                {'type': 'ImageToTensor', 'keys': ['img'
                    ]
                },
                {'type': 'Collect', 'keys': ['img'
                    ]
                }
            ]
        }
    ], 'data': {'samples_per_gpu': 2, 'workers_per_gpu': 2, 'train': {'type': 'CocoDataset', 'ann_file': 'data/coco/annotations/instances_train2017.json', 'img_prefix': 'data/coco/train2017/', 'pipeline': [
                {'type': 'LoadImageFromFile'
                },
                {'type': 'LoadAnnotations', 'with_bbox': True
                },
                {'type': 'Resize', 'img_scale': (1333,
                    800), 'keep_ratio': True
                },
                {'type': 'RandomFlip', 'flip_ratio': 0.5
                },
                {'type': 'Normalize', 'mean': [
                        123.675,
                        116.28,
                        103.53
                    ], 'std': [
                        58.395,
                        57.12,
                        57.375
                    ], 'to_rgb': True
                },
                {'type': 'Pad', 'size_divisor': 32
                },
                {'type': 'DefaultFormatBundle'
                },
                {'type': 'Collect', 'keys': ['img', 'gt_bboxes', 'gt_labels'
                    ]
                }
            ]
        }, 'val': {'type': 'CocoDataset', 'ann_file': 'data/coco/annotations/instances_val2017.json', 'img_prefix': 'data/coco/val2017/', 'pipeline': [
                {'type': 'LoadImageFromFile'
                },
                {'type': 'MultiScaleFlipAug', 'img_scale': (1333,
                    800), 'flip': False, 'transforms': [
                        {'type': 'Resize', 'keep_ratio': True
                        },
                        {'type': 'RandomFlip'
                        },
                        {'type': 'Normalize', 'mean': [
                                123.675,
                                116.28,
                                103.53
                            ], 'std': [
                                58.395,
                                57.12,
                                57.375
                            ], 'to_rgb': True
                        },
                        {'type': 'Pad', 'size_divisor': 32
                        },
                        {'type': 'ImageToTensor', 'keys': ['img'
                            ]
                        },
                        {'type': 'Collect', 'keys': ['img'
                            ]
                        }
                    ]
                }
            ]
        }, 'test': {'type': 'CocoDataset', 'ann_file': 'data/coco/annotations/instances_val2017.json', 'img_prefix': 'data/coco/val2017/', 'pipeline': [
                {'type': 'LoadImageFromFile'
                },
                {'type': 'MultiScaleFlipAug', 'img_scale': (1333,
                    800), 'flip': False, 'transforms': [
                        {'type': 'Resize', 'keep_ratio': True
                        },
                        {'type': 'RandomFlip'
                        },
                        {'type': 'Normalize', 'mean': [
                                123.675,
                                116.28,
                                103.53
                            ], 'std': [
                                58.395,
                                57.12,
                                57.375
                            ], 'to_rgb': True
                        },
                        {'type': 'Pad', 'size_divisor': 32
                        },
                        {'type': 'ImageToTensor', 'keys': ['img'
                            ]
                        },
                        {'type': 'Collect', 'keys': ['img'
                            ]
                        }
                    ]
                }
            ]
        }
    }, 'evaluation': {'interval': 1, 'metric': 'bbox'
    }, 'optimizer': {'type': 'SGD', 'lr': 0.02, 'momentum': 0.9, 'weight_decay': 0.0001
    }, 'optimizer_config': {'grad_clip': None
    }, 'lr_config': {'policy': 'step', 'warmup': 'linear', 'warmup_iters': 500, 'warmup_ratio': 0.001, 'step': [
            8,
            11
        ]
    }, 'runner': {'type': 'EpochBasedRunner', 'max_epochs': 12
    }, 'checkpoint_config': {'interval': 1
    }, 'log_config': {'interval': 50, 'hooks': [
            {'type': 'TextLoggerHook'
            }
        ]
    }, 'custom_hooks': [
        {'type': 'NumClassCheckHook'
        }
    ], 'dist_params': {'backend': 'nccl'
    }, 'log_level': 'INFO', 'load_from': None, 'resume_from': None, 'workflow': [('train',
        1)
    ], 'custom_imports': {'imports': ['custom.ops.rep_deform_conv', 'custom.models.backbones.rep_resnet'
        ], 'allow_failed_imports': False
    }
}